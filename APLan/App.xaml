<Application x:Class="APLan.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:converters="clr-namespace:APLan.Converters"
             xmlns:helperClasses="clr-namespace:APLan.HelperClasses"
             xmlns:viewModels="clr-namespace:APLan.ViewModels"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <Cursor x:Key="arrow">Arrow</Cursor>
        <SolidColorBrush x:Key="backGround">white</SolidColorBrush>
        <SolidColorBrush x:Key="themeColor">#cd7ef0</SolidColorBrush>

        <helperClasses:Loading x:Key="globalLoading"></helperClasses:Loading>

        <Style TargetType="ScrollBar">
            <Setter Property="Background" Value="white"/>
        </Style>
        <Style TargetType="Thumb">
            <Setter Property="Background" Value="#cc54f4"/>
        </Style>
        <!--Converters-->
        <converters:XvalueConverter x:Key="xValueConverter"></converters:XvalueConverter>
        <converters:YvalueConverter x:Key="yValueConverter"></converters:YvalueConverter>

        <converters:XvalueConverterSignalsPlanning x:Key="xValueConverterSignal"></converters:XvalueConverterSignalsPlanning>
        <converters:YvalueConverterSignalsPlanning x:Key="yValueConverterSignal"></converters:YvalueConverterSignalsPlanning>

        <converters:CoordinatesConverter x:Key="coordinateConverter"></converters:CoordinatesConverter>
        <converters:CoodrinatesSinglePointConverter x:Key="SingleCoordinateConverter"></converters:CoodrinatesSinglePointConverter>

        
        <converters:MultiBindingConverter x:Key="multiBindingConverter"></converters:MultiBindingConverter>
        <converters:StringToDoubleConverter x:Key="stringToDoubleconverter"></converters:StringToDoubleConverter>

        <converters:HalfLengthConverter x:Key="HalfLengthConverter"></converters:HalfLengthConverter>
        <converters:DrawUserControlSize x:Key="DrawUserControlSize"></converters:DrawUserControlSize>

        <converters:LoadingAngleConverter x:Key="LoadingAngleConverter"></converters:LoadingAngleConverter>
        <converters:TitleConverter x:Key="TitleConverter"></converters:TitleConverter>

   
        <!--export-->
        <viewModels:ExportWindowViewModel x:Key="exportWindowViewModel"/>

        <!--Drawing-->
        <viewModels:DrawViewModel x:Key="drawViewModel"/>
        <viewModels:CanvasToolsTabViewModel x:Key="canvasToolsTabViewModel"/>

        <!--visualizedData-->
        <viewModels:VisualizedDataViewModel x:Key="visualizedDataViewModel"/>

        <!--upperTab-->
        <viewModels:NewProjectViewModel x:Key="newProjectViewModel"/>
        <viewModels:MainMenuViewModel x:Key="mainMenuViewModel"/>

        <!--Validator-->
        <viewModels:EulynxValidatorViewModel x:Key="EulynxValidatorViewModel"/>

        <!--plan-->
        <viewModels:PlanningTabViewModel x:Key="planTabViewModel"></viewModels:PlanningTabViewModel>

        <!--templateSelection-->
        <helperClasses:TemplateSelectorForSelected x:Key="selectedTemplateSelector"></helperClasses:TemplateSelectorForSelected>
        <helperClasses:TemplateSelectorForLoadedObjects x:Key="selectedTemplateSelectorForLoadedObjects"></helperClasses:TemplateSelectorForLoadedObjects>


        <!--symbolsTab-->
        <viewModels:SymbolsTabViewModel x:Key="symbolsTabViewModel"/>


        <!--selection templates-->
        <!--for polyLines-->
        <DataTemplate  x:Key="CustomPolylineTempalte" DataType="{x:Type Path}">
            <Border BorderBrush="{StaticResource themeColor}" BorderThickness="1" Padding="3">
            <StackPanel>
                <TextBlock>
                    <TextBlock.Text>
                        <Binding Path="DataContext" Converter="{StaticResource TitleConverter}" />
                    </TextBlock.Text>
                </TextBlock>
                <TreeView BorderThickness="0" 
                      ScrollViewer.HorizontalScrollBarVisibility="Disabled" 
                      ScrollViewer.VerticalScrollBarVisibility="Disabled"
                      >
                    <TreeViewItem Header="Eulynx attributes">
                        <DataGrid 
                                  AutoGenerateColumns="False"
                                  AlternatingRowBackground = "White"
                                  IsReadOnly="True"
                                  ItemsSource="{Binding DataContext.Data}">
                                <DataGrid.Columns>
                                    <DataGridTextColumn Header = "Property" Binding="{Binding Path=Key}"/>
                                <DataGridTextColumn Header = "Value" Binding="{Binding Path=Value}"/>
                            </DataGrid.Columns >
                        </DataGrid>
                    </TreeViewItem>
                    <TreeViewItem Header="Source files attributes">
                        <DataGrid 
                                  AutoGenerateColumns="False"
                                  AlternatingRowBackground = "White"
                                  IsReadOnly="True"
                                  ItemsSource="{Binding DataContext.ExtraInfo}">
                            <DataGrid.Columns>
                                <DataGridTextColumn Header = "Property" Binding="{Binding Path=Key}"/>
                                <DataGridTextColumn Header = "Value" Binding="{Binding Path=Value}"/>
                            </DataGrid.Columns >
                        </DataGrid>
                    </TreeViewItem>
                </TreeView>
            </StackPanel>
            </Border>
        </DataTemplate>
        <!--for signals-->
        <DataTemplate x:Key="SymbolTemplate" DataType="{x:Type Image}">
            <!--<TextBlock Text="{Binding Opacity}" FontWeight="Bold" />-->
        </DataTemplate>
        
        
        <!--loading templates-->
        <!--loaded signal from saving-->
        <DataTemplate  x:Key="loadedSignal"  
                       DataType="{x:Type helperClasses:CanvasObjectInformation}">
            <helperClasses:CustomCanvasSignal x:Name="signal" 
                                              Width="{Binding Scale}" 
                                              Height="{Binding RelativeSource={RelativeSource self}, Path=Width}" 
                                              Source="{Binding SignalImageSource}"
                                              RenderTransformOrigin="0.5,0.5">
                <Image.RenderTransform>
                    <MatrixTransform Matrix="{Binding RenderTransformMatrix}" ></MatrixTransform>
                </Image.RenderTransform>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Loaded">
                        <i:InvokeCommandAction 
                                               Command="{Binding Source={StaticResource drawViewModel}, Path=ObjectLoaded}" 
                                               CommandParameter="{Binding ElementName=signal}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </helperClasses:CustomCanvasSignal>
        </DataTemplate>
        <!--loaded Text from saving-->
        <DataTemplate  x:Key="loadedText" DataType="{x:Type helperClasses:CanvasObjectInformation}">
            <helperClasses:CustomCanvasText x:Name="Text"
                                            Text="{Binding IncludedText}"
                                            FontSize="{Binding IncludedTextSize}"
                                            RenderTransformOrigin="0,0"
                                            >
                <helperClasses:CustomCanvasText.RenderTransform>
                    <MatrixTransform Matrix="{Binding RenderTransformMatrix}" ></MatrixTransform>
                </helperClasses:CustomCanvasText.RenderTransform>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Loaded">
                        <i:InvokeCommandAction 
                                               Command="{Binding Source={StaticResource drawViewModel}, Path=ObjectLoaded}" 
                                               CommandParameter="{Binding ElementName=Text}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </helperClasses:CustomCanvasText>
        </DataTemplate>

        <DataTemplate x:Key="CanvaContentTemplate" DataType="{x:Type helperClasses:CustomItem}">
            <TextBlock  Name="myText" Width="100" HorizontalAlignment="Stretch" Text="{Binding ElementName=myText, Path=DataContext, Converter={StaticResource TitleConverter}}">
            </TextBlock>
        </DataTemplate>
    </Application.Resources>
</Application>
